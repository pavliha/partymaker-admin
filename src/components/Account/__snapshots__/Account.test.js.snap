// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Account /> renders null when unauthorized 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <WithStyles(undefined)>
    <Connect(Account)
      classes={
        Object {
          "avatar": "Connect(Account)-avatar-2",
          "root": "Connect(Account)-root-1",
          "userName": "Connect(Account)-userName-3",
        }
      }
    >
      <Account
        classes={
          Object {
            "avatar": "Connect(Account)-avatar-2",
            "root": "Connect(Account)-root-1",
            "userName": "Connect(Account)-userName-3",
          }
        }
        redux={
          Object {
            "logout": [Function],
            "user": null,
          }
        }
      />
    </Connect(Account)>
  </WithStyles(undefined)>
</Provider>
`;

exports[`<Account /> renders username when authorized  1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <WithStyles(undefined)>
    <Connect(Account)
      classes={
        Object {
          "avatar": "Connect(Account)-avatar-2",
          "root": "Connect(Account)-root-1",
          "userName": "Connect(Account)-userName-3",
        }
      }
    >
      <Account
        classes={
          Object {
            "avatar": "Connect(Account)-avatar-2",
            "root": "Connect(Account)-root-1",
            "userName": "Connect(Account)-userName-3",
          }
        }
        redux={
          Object {
            "logout": [Function],
            "user": Object {
              "id": 1,
              "name": "Test User",
            },
          }
        }
      >
        <div
          className="Connect(Account)-root-1"
        >
          <WithStyles(ForwardRef(IconButton))
            aria-haspopup="true"
            color="inherit"
            onClick={[Function]}
          >
            <ForwardRef(IconButton)
              aria-haspopup="true"
              classes={
                Object {
                  "colorInherit": "MuiIconButton-colorInherit",
                  "colorPrimary": "MuiIconButton-colorPrimary",
                  "colorSecondary": "MuiIconButton-colorSecondary",
                  "disabled": "Mui-disabled",
                  "edgeEnd": "MuiIconButton-edgeEnd",
                  "edgeStart": "MuiIconButton-edgeStart",
                  "label": "MuiIconButton-label",
                  "root": "MuiIconButton-root",
                  "sizeSmall": "MuiIconButton-sizeSmall",
                }
              }
              color="inherit"
              onClick={[Function]}
            >
              <WithStyles(ForwardRef(ButtonBase))
                aria-haspopup="true"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-colorInherit"
                disabled={false}
                focusRipple={true}
                onClick={[Function]}
              >
                <ForwardRef(ButtonBase)
                  aria-haspopup="true"
                  centerRipple={true}
                  className="MuiIconButton-root MuiIconButton-colorInherit"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  disabled={false}
                  focusRipple={true}
                  onClick={[Function]}
                >
                  <button
                    aria-haspopup="true"
                    className="MuiButtonBase-root MuiIconButton-root MuiIconButton-colorInherit"
                    disabled={false}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="button"
                  >
                    <span
                      className="MuiIconButton-label"
                    >
                      <Memo(AccountCircleIcon)
                        className="Connect(Account)-avatar-2"
                        user={
                          Object {
                            "id": 1,
                            "name": "Test User",
                          }
                        }
                      >
                        <svg
                          className="mdi-icon Connect(Account)-avatar-2"
                          fill="currentColor"
                          height={24}
                          user={
                            Object {
                              "id": 1,
                              "name": "Test User",
                            }
                          }
                          viewBox="0 0 24 24"
                          width={24}
                        >
                          <path
                            d="M12,19.2C9.5,19.2 7.29,17.92 6,16C6.03,14 10,12.9 12,12.9C14,12.9 17.97,14 18,16C16.71,17.92 14.5,19.2 12,19.2M12,5A3,3 0 0,1 15,8A3,3 0 0,1 12,11A3,3 0 0,1 9,8A3,3 0 0,1 12,5M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12C22,6.47 17.5,2 12,2Z"
                          />
                        </svg>
                      </Memo(AccountCircleIcon)>
                    </span>
                    <NoSsr>
                      <WithStyles(undefined)
                        center={true}
                      >
                        <ForwardRef(TouchRipple)
                          center={true}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(IconButton)>
          </WithStyles(ForwardRef(IconButton))>
          <WithStyles(ForwardRef(Typography))
            className="Connect(Account)-userName-3"
            onClick={[Function]}
          >
            <ForwardRef(Typography)
              className="Connect(Account)-userName-3"
              classes={
                Object {
                  "alignCenter": "MuiTypography-alignCenter",
                  "alignJustify": "MuiTypography-alignJustify",
                  "alignLeft": "MuiTypography-alignLeft",
                  "alignRight": "MuiTypography-alignRight",
                  "body1": "MuiTypography-body1",
                  "body2": "MuiTypography-body2",
                  "button": "MuiTypography-button",
                  "caption": "MuiTypography-caption",
                  "colorError": "MuiTypography-colorError",
                  "colorInherit": "MuiTypography-colorInherit",
                  "colorPrimary": "MuiTypography-colorPrimary",
                  "colorSecondary": "MuiTypography-colorSecondary",
                  "colorTextPrimary": "MuiTypography-colorTextPrimary",
                  "colorTextSecondary": "MuiTypography-colorTextSecondary",
                  "displayBlock": "MuiTypography-displayBlock",
                  "displayInline": "MuiTypography-displayInline",
                  "gutterBottom": "MuiTypography-gutterBottom",
                  "h1": "MuiTypography-h1",
                  "h2": "MuiTypography-h2",
                  "h3": "MuiTypography-h3",
                  "h4": "MuiTypography-h4",
                  "h5": "MuiTypography-h5",
                  "h6": "MuiTypography-h6",
                  "noWrap": "MuiTypography-noWrap",
                  "overline": "MuiTypography-overline",
                  "paragraph": "MuiTypography-paragraph",
                  "root": "MuiTypography-root",
                  "srOnly": "MuiTypography-srOnly",
                  "subtitle1": "MuiTypography-subtitle1",
                  "subtitle2": "MuiTypography-subtitle2",
                }
              }
              onClick={[Function]}
            >
              <p
                className="MuiTypography-root Connect(Account)-userName-3 MuiTypography-body1"
                onClick={[Function]}
              >
                Test User
              </p>
            </ForwardRef(Typography)>
          </WithStyles(ForwardRef(Typography))>
          <WithStyles(ForwardRef(Menu))
            anchorEl={null}
            id="simple-menu"
            onClose={[Function]}
            open={false}
          >
            <ForwardRef(Menu)
              anchorEl={null}
              classes={
                Object {
                  "list": "MuiMenu-list",
                  "paper": "MuiMenu-paper",
                }
              }
              id="simple-menu"
              onClose={[Function]}
              open={false}
            >
              <WithStyles(ForwardRef(Popover))
                PaperProps={
                  Object {
                    "classes": Object {
                      "root": "MuiMenu-paper",
                    },
                  }
                }
                anchorEl={null}
                anchorOrigin={
                  Object {
                    "horizontal": "left",
                    "vertical": "top",
                  }
                }
                getContentAnchorEl={[Function]}
                id="simple-menu"
                onClose={[Function]}
                onEntering={[Function]}
                open={false}
                transformOrigin={
                  Object {
                    "horizontal": "left",
                    "vertical": "top",
                  }
                }
                transitionDuration="auto"
              >
                <ForwardRef(Popover)
                  PaperProps={
                    Object {
                      "classes": Object {
                        "root": "MuiMenu-paper",
                      },
                    }
                  }
                  anchorEl={null}
                  anchorOrigin={
                    Object {
                      "horizontal": "left",
                      "vertical": "top",
                    }
                  }
                  classes={
                    Object {
                      "paper": "MuiPopover-paper",
                      "root": "MuiPopover-root",
                    }
                  }
                  getContentAnchorEl={[Function]}
                  id="simple-menu"
                  onClose={[Function]}
                  onEntering={[Function]}
                  open={false}
                  transformOrigin={
                    Object {
                      "horizontal": "left",
                      "vertical": "top",
                    }
                  }
                  transitionDuration="auto"
                >
                  <ForwardRef(Modal)
                    BackdropProps={
                      Object {
                        "invisible": true,
                      }
                    }
                    className="MuiPopover-root"
                    id="simple-menu"
                    onClose={[Function]}
                    open={false}
                  />
                </ForwardRef(Popover)>
              </WithStyles(ForwardRef(Popover))>
            </ForwardRef(Menu)>
          </WithStyles(ForwardRef(Menu))>
        </div>
      </Account>
    </Connect(Account)>
  </WithStyles(undefined)>
</Provider>
`;
